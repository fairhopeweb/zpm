#!/usr/bin/env zsh

fpath+=("${_ZPM_DIR}/functions" "${ZSH_CACHE_DIR}/functions")

function _success_msg() {
  local msg
  if [[ "$Command" == 'install' ]]; then
    msg="Install"
  else
    msg='Upgrade'
  fi

  echo "${c[green]}${c[bold]}${msg}${c[reset]} ${Plugin_hyperlink} ${c[green]}âœ”${c[reset]}"
}

function _error_msg() {
  local msg
  if [[ "$Command" == 'install' ]]; then
    msg="Can't install"
  else
    msg="Can't upgrade"
  fi

  echo "${c[red]}${c[bold]}${msg}${c[reset]} ${Plugin_hyperlink} ${c[red]}${c[bold]}âœ–${c[reset]}"
}

function _skip_msg() {
  local msg
  if [[ "$Command" == 'install' ]]; then
    msg="Skip install"
  else
    msg="Skip upgrade"
  fi

  echo "${c[yellow]}${c[bold]}${msg}${c[reset]} ${Plugin_hyperlink} ${c[yellow]}âœ–${c[reset]}"
}

function _upgrade_msg() {
  if [[ "$1" == "0" ]]; then
    _success_msg
  else
    _error_msg
  fi
}

function _install_msg() {
  if [[ "$1" == "0" ]]; then
    _success_msg
  else
    _error_msg
  fi
}

function _msg() {
  if [[ "$Command" == "install" ]]; then
    _install_msg "$1"
  else
    _upgrade_msg "$1"
  fi
}

if [[ "$CLICOLOR" != "0" ]]; then
  typeset -gA c=(
    reset "[0m"
    bold "[1m"

    black "[30m"
    red "[31m"
    green "[32m"
    yellow "[33m"
    blue "[34m"
    magenta "[35m"
    cyan "[36m"
    white "[37m"
  )
fi

autoload -Uz                    \
  @zpm-get-plugin-basename      \
  @zpm-get-plugin-hyperlink     \
  @zpm-get-plugin-link          \
  @zpm-get-plugin-name          \
  @zpm-get-plugin-origin        \
  @zpm-get-plugin-origin-type   \
  @zpm-get-plugin-path          \
  @zpm-get-plugin-type          \
  @zpm-get-plugin-vcs-root-path \
  @zpm-get-plugin-destination   \
  @zpm-log


(( $#_ZPM_autoload )) && autoload -Uz -- ${(z)_ZPM_autoload}

local Command="$1"
local Plugin="$2"
local Plugin_name=$(@zpm-get-plugin-name "$Plugin")
local Plugin_type=$(@zpm-get-plugin-type "$Plugin_name")
local Plugin_basename=$(@zpm-get-plugin-basename "$Plugin_name")
local Plugin_path=$(@zpm-get-plugin-path "$Plugin_name" "$Plugin_type")
local Plugin_origin_type=$(@zpm-get-plugin-origin-type "$Plugin_name")
local Plugin_origin=$(@zpm-get-plugin-origin "$Plugin" "$Plugin_name" "$Plugin_basename" "$Plugin_type" "$Plugin_origin_type")
local Plugin_link=$(@zpm-get-plugin-link "$Plugin_name" "$Plugin_type" "$Plugin_origin")
local Plugin_hyperlink=$(@zpm-get-plugin-hyperlink "$Plugin_name" "$Plugin_link" "$Plugin_origin")
local Plugin_destination=$(@zpm-get-plugin-destination "$Plugin" "$Plugin_path" "$Plugin_basename" "$Plugin_origin_type")

if [[ "$Command" == "upgrade" ]]; then
  @zpm-log zpm:upgrade "Upgrade '${Plugin}'"
elif [[ "$Command" == "install" ]]; then
  @zpm-log zpm:install "Install '${Plugin}'"
else
  echo Unknown command
fi

if [[ "$Plugin_origin_type" == 'git' ]]; then
  if [[ "$Command" == 'install' ]]; then
    mkdir -p "${Plugin_destination}"
    git clone --recursive "${Plugin_origin}" --depth 1 --single-branch "${Plugin_destination}" </dev/null >/dev/null 2>/dev/null
  else
    git --git-dir="${Plugin_destination}/.git/" --work-tree="${Plugin_destination}" pull </dev/null >/dev/null 2>/dev/null
  fi
  _msg $?
elif [[ "$Plugin_origin_type" == 'remote' ]]; then
  mkdir -p "${Plugin_destination:h}"
  curl --silent "${Plugin_origin}" --output "${Plugin_destination}" 2>/dev/null
  _msg $?
elif [[ "$Plugin_origin_type" == 'dir-link' ]]; then
  mkdir -p "${Plugin_destination}"
  ln -sf "${Plugin_origin}" "${Plugin_destination}" 2>/dev/null
  _msg $?
elif [[ "$Plugin_origin_type" == 'file-link' ]]; then
  mkdir -p "${Plugin_destination:h}"
  ln -sf "${Plugin_origin}" "${Plugin_destination}" 2>/dev/null
  _msg $?
elif [[ "$Plugin_origin_type" == 'remote' ]]; then
  mkdir -p "${Plugin_destination:h}"
  curl --silent "${Plugin_origin}" --output "${Plugin_destination}" 2>/dev/null
  _msg $?
elif [[ "$Plugin_origin_type" == 'exec' ]]; then
  mkdir -p "${Plugin_destination:h}"
  cd "${Plugin_destination:h}"
  eval "$Plugin_origin" 1>! "${Plugin_destination}" 2>/dev/null
  _msg $?
else
  _skip_msg
fi

if [[ "$Plugin" == *',destination:bin'* ]]; then
  chmod +x "${Plugin_destination}" >/dev/null 2>/dev/null
fi


if [[ "$Plugin" == *',hook:'* && -e "$Plugin_path" ]]; then
  cd "$Plugin_path"
  eval "${${Plugin##*,hook:}%%\,*}" >/dev/null

  echo "${c[green]}${c[bold]}Run hook for${c[reset]} ${Plugin_hyperlink} ${c[green]}âœ”${c[reset]}"
fi
