#!/usr/bin/env zsh
fpath+=("${_ZPM_DIR}/functions" "${ZSH_CACHE_DIR}/functions")

function _upgrade_success_msg() {
  local status_string="${c[green]}${c[bold]}Upgrade${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"
  echo $status_string
}

function _upgrade_error_msg() {
  local status_string="${c[red]}${c[bold]}Can't upgrade${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[red]}${c[bold]}âœ•${c[reset]}"
  echo $status_string
}

function _upgrade_skip_msg() {
  local status_string="${c[yellow]}${c[bold]}Skip upgrade${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[yellow]}âœ•${c[reset]}"
  echo $status_string
}

function _upgrade_msg() {
  if [[ "$?" == "0" ]]; then
    _upgrade_success_msg
  else
    _upgrade_error_msg
  fi
}

function _install_success_msg() {
  local status_string="${c[green]}${c[bold]}Install${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"
  echo $status_string
}

function _install_error_msg() {
  local status_string="${c[red]}${c[bold]}Can't install${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[red]}${c[bold]}âœ•${c[reset]}"
  echo $status_string
}

function _install_skip_msg() {
  local status_string="${c[yellow]}${c[bold]}Skip install${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[yellow]}âœ•${c[reset]}"
  echo $status_string
}

function _install_msg() {
  if [[ "$?" == "0" ]]; then
    _install_success_msg
  else
    _install_error_msg
  fi
}

if [[ "$CLICOLOR" != "0" ]]; then
  typeset -gA c=(
    reset "[0m"
    bold "[1m"

    black "[30m"
    red "[31m"
    green "[32m"
    yellow "[33m"
    blue "[34m"
    magenta "[35m"
    cyan "[36m"
    grey "[37m"
  )
fi

autoload -Uz                    \
  @zpm-get-plugin-basename      \
  @zpm-get-plugin-hyperlink     \
  @zpm-get-plugin-link          \
  @zpm-get-plugin-name          \
  @zpm-get-plugin-origin        \
  @zpm-get-plugin-origin-type   \
  @zpm-get-plugin-path          \
  @zpm-get-plugin-type          \
  @zpm-get-plugin-vcs-root-path \
  @zpm-log                      \


(( $#_ZPM_autoload )) && autoload -Uz -- ${(z)_ZPM_autoload}

local Command="$1"
local Plugin="$2"
local Plugin_name=$(@zpm-get-plugin-name "$Plugin")
local Plugin_type=$(@zpm-get-plugin-type "$Plugin_name")
local Plugin_basename=$(@zpm-get-plugin-basename "$Plugin_name")
local Plugin_path=$(@zpm-get-plugin-path "$Plugin_name" "$Plugin_type")
local Plugin_origin_type=$(@zpm-get-plugin-origin-type "$Plugin_name")
local Plugin_origin=$(@zpm-get-plugin-origin "$Plugin" "$Plugin_name" "$Plugin_basename" "$Plugin_type")
local Plugin_link=$(@zpm-get-plugin-link "$Plugin_name" "$Plugin_type" "$Plugin_origin")
local Plugin_hyperlink=$(@zpm-get-plugin-hyperlink "$Plugin_name" "$Plugin_link" "$Plugin_origin")

if [[ "$Command" == "upgrade" ]]; then
  @zpm-log zpm:upgrade "Upgrade '${Plugin}'"

  if [[ "$Plugin_origin_type" == 'git' ]]; then
    git --git-dir="${Plugin_path}/.git/" --work-tree="${Plugin_path}/" pull </dev/null >/dev/null 2>/dev/null
    _upgrade_msg
  elif [[ "$Plugin_origin_type" == 'remote' ]]; then
    curl --silent "${Plugin_origin}" --output "${Plugin_path}/${Plugin_basename}.zsh" 2>/dev/null
    _upgrade_msg
  else
    _upgrade_skip_msg
  fi
elif [[ "$Command" == 'install' ]]; then
  if [[ "$Plugin_origin_type" == 'git' ]]; then
    git clone --recursive "${Plugin_origin}" --depth 1 --single-branch "${Plugin_path}" </dev/null >/dev/null 2>/dev/null
    _install_msg
  elif [[ "$Plugin_origin_type" == 'dir' ]]; then
    ln -sf "${Plugin_origin}" "${Plugin_path}" 2>/dev/null
    _install_msg
  elif [[ "$Plugin_origin_type" == 'file' ]]; then
    mkdir -p "${Plugin_path}"
    ln -sf "${Plugin_origin}" "${Plugin_path}/${Plugin_basename}.zsh" 2>/dev/null
    _install_msg
  elif [[ "$Plugin_origin_type" == 'remote' ]]; then
    mkdir -p "${Plugin_path}"
    curl --silent "${Plugin_origin}" --output "${Plugin_path}/${Plugin_basename}.zsh" 2>/dev/null
    _install_msg
  elif [[ "$Plugin_origin_type" == 'empty' ]]; then
    mkdir -p "${Plugin_path}"
    _install_msg
  else
    _install_skip_msg
  fi
else
  echo Unknown command
fi

if [[ "$Plugin" == *',gen-plugin:'* && -e "$Plugin_path" ]]; then
  local status_string="${c[green]}${c[bold]}Generate plugin for${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  cd "$Plugin_path"
  eval "${${Plugin##*,gen-plugin:}%%\,*}" 1>! "${Plugin_path}/zpm-generated.zsh" 2>/dev/null

  echo "$status_string"
fi

if [[ "$Plugin" == *',gen-completion:'* && -e "$Plugin_path" ]]; then
  local status_string="${c[green]}${c[bold]}Generate completion for${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  cd "$Plugin_path"
  mkdir -p "${Plugin_path}/functions"
  eval "${${Plugin##*,gen-completion:}%%\,*}" 1>! "${Plugin_path}/functions/_${Plugin_basename}" 2>/dev/null

  echo "$status_string"
fi

if [[ "$Plugin" == *',hook:'* && -e "$Plugin_path" ]]; then
  local status_string="${c[green]}${c[bold]}Run hook for${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  cd "$Plugin_path"
  eval "${${Plugin##*,hook:}%%\,*}" >/dev/null

  echo "$status_string"
fi
